name: CI


on: 
  push:
    branches: [master, dev]


jobs:
  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles" ..
          nmake install

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        path: build/install-dir
        name: Windows
  

  linux-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        path: build/install-dir
        name: Linux


  linux-aarch64-build:
    runs-on: ubuntu-latest
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
  
    - name: Build
      run: |
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          make install -j $(nproc)

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        path: build/install-dir
        name: LinuxARM


  windows-tests:
    runs-on: windows-latest
    needs: windows-build
    steps:
    - uses: actions/checkout@v4

    - name: Enable NMake
      uses: ilammy/msvc-dev-cmd@v1.13.0

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: Windows
        name: Windows
        
    - name: Tests
      working-directory: Tests
      run: |
          python tests.py


  linux-tests:
    runs-on: ubuntu-latest
    needs: linux-build
    container:
      image: lazypanda07/ubuntu_cxx20:24.04
    steps:
    - uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: Linux
        name: Linux
        
    - name: Tests
      working-directory: Tests
      run: |
          chmod +x ../Linux/LocalizationUtils
          python3 tests.py


  linux-aarch64-tests:
    runs-on: ubuntu-latest
    needs: linux-aarch64-build
    container:
      image: lazypanda07/ubuntu_cxx20:aarch64
    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      run: sudo apt update && sudo apt install -y python3 python3-pip python3-venv

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: LinuxARM
        name: LinuxARM
        
    - name: Tests
      working-directory: Tests
      shell: bash
      run: |
          python3 -m venv .venv
          source .venv/bin/activate
          chmod +x ../LinuxARM/LocalizationUtils
          python3 tests.py
  

  publish:
    runs-on: ubuntu-latest
    needs: [windows-tests, linux-tests, linux-aarch64-tests]

    steps:
    - uses: actions/checkout@v4
  
    - uses: LazyPanda07/extract-current-branch@master
    
    - name: Setup release version variable
      shell: pwsh
      run: echo "VERSION=$($($($(Select-String -Path .\LocalizationUtils\src\Utility.cpp -Pattern version) -split '( = )')[3].TrimEnd(';')).Trim('\"'))" >> $Env:GITHUB_ENV

    - name: Download artifacts
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      uses: actions/download-artifact@v4
      
    - name: Create Windows zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip windows.zip Windows/localization_utils_settings.json Windows/LocalizationUtils.exe
      
    - name: Create Linux zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip linux.zip Linux/localization_utils_settings.json Linux/LocalizationUtils

    - name: Create Linux ARM zip
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: zip linux.zip LinuxARM/localization_utils_settings.json LinuxARM/LocalizationUtils

    - name: Publish
      if: ${{ env.CURRENT_BRANCH == 'master' }}
      run: gh release create v${{ env.VERSION }} *.zip --title v${{ env.VERSION }} --generate-notes
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
